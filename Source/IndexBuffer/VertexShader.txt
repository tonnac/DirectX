cbuffer VS_CB
{
	//x,y,z,w
	float4 g_Color	 : packoffset(c0);
	float g_fTimerX	 : packoffset(c1.x);
	float index		 : packoffset(c1.y);
	float Angle		 : packoffset(c1.z);
	float Scale		 : packoffset(c1.w);
};
float4 Rotate(in float3 pos)
{
	float3 vPos = pos;
	vPos.x = pos.x + (sin(Angle) / 4) + (pos.x * cos(Angle) + pos.y * sin(Angle));
	vPos.y = pos.y + (sin(Angle) / 4) + (pos.y * cos(Angle) - pos.x * sin(Angle));
	return float4(vPos,1.0f);
}

float2 GetPos(in float3 pos, in uint index)
{
	float4 vPos = float4(pos,1.0f);
	switch(index)
	{
		case 0: {vPos = float4(pos,1.0f);} break;
		case 1: {vPos = float4(Rotate(pos));} break;
	}
	vPos = vPos * Scale;
	return vPos;
}

float4 VERTEXSHADER( in float3 pos : POSITION) : SV_POSITION
{
	return float4(GetPos(pos,index),0.5f,1.0f);
}

float4 PIXELSHADER( in float4 pos : SV_POSITION) : SV_Target
{
	float fColorR = cos(g_fTimerX)*0.5 + 0.5;
	float fColorG = sin(g_fTimerX)*0.5 + 0.5;
	float fColorB = abs(cos(g_fTimerX));
	return float4(fColorR, fColorG, fColorB, 1.0f);
}